<?xml version="1.0" encoding="utf-8"?>

<!-- https://github.com/boostorg/date_time/blob/6015e3039114c0f2ba456e00dd50404e3fb88275/include/boost/date_time/gregorian_calendar.ipp#L108-L126 -->
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="QuantLib::Date">
    <Intrinsic Name="_a"          Expression="serialNumber_+32044+2415019"/>
    <Intrinsic Name="_b"          Expression="(4*_a()+3)/146097"/>
    <Intrinsic Name="_c"          Expression="_a()-((146097*_b())/4)"/>
    <Intrinsic Name="_d"          Expression="(4*_c()+3)/1461"/>
    <Intrinsic Name="_e"          Expression="_c()-(1461*_d())/4"/>
    <Intrinsic Name="_m"          Expression="(5*_e()+2)/153"/>
    <Intrinsic Name="day"         Expression="_e()-((153*_m()+2)/5)+1"/>
    <Intrinsic Name="day_tens"    Expression="day()/10"/>
    <Intrinsic Name="day_units"   Expression="day()%10"/>
    <Intrinsic Name="month"       Expression="_m()+3-12*(_m()/10)"/>
    <Intrinsic Name="month_tens"  Expression="month()/10"/>
    <Intrinsic Name="month_units" Expression="month()%10"/>
    <Intrinsic Name="year"        Expression="100*_b()+_d()-4800+(_m()/10)"/>
    <DisplayString>{year()}-{month_tens()}{month_units()}-{day_tens()}{day_units()}</DisplayString>
    <Expand>
      <Synthetic Name="[year]">
        <DisplayString>{year()}</DisplayString>
      </Synthetic>
      <Synthetic Name="[month]">
        <DisplayString>{month_tens()}{month_units()}</DisplayString>
      </Synthetic>
      <Synthetic Name="[day]">
        <DisplayString>{day_tens()}{day_units()}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="QuantLib::Array">
    <DisplayString Condition="n_ == 0">{{size={n_} data=[]}}</DisplayString>
    <DisplayString Condition="n_ == 1">{{size={n_} data=[{data_[0]}]}}</DisplayString>
    <DisplayString Condition="n_ == 2">{{size={n_} data=[{data_[0]}, {data_[1]}]}}</DisplayString>
    <DisplayString Condition="n_ == 3">{{size={n_} data=[{data_[0]}, {data_[1]}, {data_[2]}]}}</DisplayString>
    <DisplayString Condition="n_ == 4">{{size={n_} data=[{data_[0]}, {data_[1]}, {data_[2]}, {data_[3]}]}}</DisplayString>
    <DisplayString Condition="n_ >= 5">{{size={n_} data=[{data_[0]}, {data_[1]}, {data_[2]}, {data_[3]}, {data_[4]},...]}}</DisplayString>
    <Expand>
      <Synthetic Name="[size]">
        <DisplayString>{n_}</DisplayString>
      </Synthetic>
      <ArrayItems Condition="data_.px != 0">
          <Size>n_</Size>
          <ValuePointer>data_.px</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QuantLib::Period">
    <DisplayString>{length_} {units_,en}</DisplayString>
  </Type>

  <Type Name="QuantLib::InterestRate">
    <DisplayString Condition="freqMakesSense_">{r_*100}% {comp_,en} {(Frequency)freq_,en}</DisplayString>
    <DisplayString Condition="!freqMakesSense_">{r_*100}% {comp_,en}</DisplayString>
  </Type>

  <Type Name="QuantLib::InterestRateIndex">
    <DisplayString>{familyName_} {{{tenor_}}}</DisplayString>
  </Type>
  <!-- Fixed x Fixed Matrix -->
  <Type Name="Eigen::Matrix&lt;*,*,*,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,-1,-1,*,*,*&gt;"/>
    <DisplayString>[{$T2}, {$T3}]</DisplayString>
    <Expand>
      <ArrayItems Condition="Flags%2">
        <!-- row major layout -->
        <Rank>2</Rank>
        <Size>$i==0 ? $T2 : $T3</Size>
        <ValuePointer>m_storage.m_data.array</ValuePointer>
      </ArrayItems>
      <ArrayItems Condition="!(Flags%2)">
        <!-- column major layout -->
        <Direction>Backward</Direction>
        <Rank>2</Rank>
        <Size>$i==0 ? $T2 : $T3</Size>
        <ValuePointer>m_storage.m_data.array</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <!-- 2 x 2 Matrix -->
  <Type Name="Eigen::Matrix&lt;*,2,2,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,2,2,*,*,*&gt;"/>
    <DisplayString>[2, 2]</DisplayString>
    <Expand>
      <Synthetic Name="[row 0]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[1]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 0]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[2]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[2]} {m_storage.m_data.array[3]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[1]} {m_storage.m_data.array[3]}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  <!-- 3 x 3 Matrix -->
  <Type Name="Eigen::Matrix&lt;*,3,3,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,3,3,*,*,*&gt;"/>
    <DisplayString>[3, 3]</DisplayString>
    <Expand>
      <Synthetic Name="[row 0]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[1]} {m_storage.m_data.array[2]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 0]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[3]} {m_storage.m_data.array[6]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[3]} {m_storage.m_data.array[4]} {m_storage.m_data.array[5]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[1]} {m_storage.m_data.array[4]} {m_storage.m_data.array[7]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 2]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[6]} {m_storage.m_data.array[7]} {m_storage.m_data.array[8]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 2]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[2]} {m_storage.m_data.array[5]} {m_storage.m_data.array[8]}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  <!-- 3 x 4 Matrix -->
  <Type Name="Eigen::Matrix&lt;*,3,4,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,3,4,*,*,*&gt;"/>
    <DisplayString>[3, 4]</DisplayString>
    <Expand>
      <Synthetic Name="[row 0]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[1]} {m_storage.m_data.array[2]} {m_storage.m_data.array[3]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 0]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[3]} {m_storage.m_data.array[6]} {m_storage.m_data.array[9]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[4]} {m_storage.m_data.array[5]} {m_storage.m_data.array[6]} {m_storage.m_data.array[7]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[1]} {m_storage.m_data.array[4]} {m_storage.m_data.array[7]} {m_storage.m_data.array[10]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 2]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[8]} {m_storage.m_data.array[9]} {m_storage.m_data.array[10]} {m_storage.m_data.array[11]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 2]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[2]} {m_storage.m_data.array[5]} {m_storage.m_data.array[8]} {m_storage.m_data.array[11]}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  <!-- 4 x 4 Matrix -->
  <Type Name="Eigen::Matrix&lt;*,4,4,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,4,4,*,*,*&gt;"/>
    <DisplayString>[4, 4]</DisplayString>
    <Expand>
      <Synthetic Name="[row 0]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[1]} {m_storage.m_data.array[2]} {m_storage.m_data.array[3]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 0]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[0]} {m_storage.m_data.array[4]} {m_storage.m_data.array[8]} {m_storage.m_data.array[12]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[4]} {m_storage.m_data.array[5]} {m_storage.m_data.array[6]} {m_storage.m_data.array[7]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 1]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[1]} {m_storage.m_data.array[5]} {m_storage.m_data.array[9]} {m_storage.m_data.array[13]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 2]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[8]} {m_storage.m_data.array[9]} {m_storage.m_data.array[10]} {m_storage.m_data.array[11]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 2]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[2]} {m_storage.m_data.array[6]} {m_storage.m_data.array[10]} {m_storage.m_data.array[14]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 3]" Condition="Flags%2">
        <DisplayString>{m_storage.m_data.array[12]} {m_storage.m_data.array[13]} {m_storage.m_data.array[14]} {m_storage.m_data.array[15]}</DisplayString>
      </Synthetic>
      <Synthetic Name="[row 3]" Condition="!(Flags%2)">
        <DisplayString>{m_storage.m_data.array[3]} {m_storage.m_data.array[7]} {m_storage.m_data.array[11]} {m_storage.m_data.array[15]}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>

  <!-- Dynamic x Dynamic Matrix -->
  <Type Name="Eigen::Matrix&lt;*,-1,-1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,-1,-1,*,*,*&gt;"/>
    <DisplayString Condition="m_storage.m_data == 0">empty</DisplayString>
    <DisplayString Condition="m_storage.m_data != 0">[{m_storage.m_rows}, {m_storage.m_cols}] (dynamic matrix)</DisplayString>
    <Expand>
      <ArrayItems Condition="Flags%2">
        <!-- row major layout -->
        <Rank>2</Rank>
        <Size>$i==0 ? m_storage.m_rows : m_storage.m_cols</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
      <ArrayItems Condition="!(Flags%2)">
        <!-- column major layout -->
        <Direction>Backward</Direction>
        <Rank>2</Rank>
        <Size>$i==0 ? m_storage.m_rows : m_storage.m_cols</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Fixed x Dynamic Matrix -->
  <Type Name="Eigen::Matrix&lt;*,*,-1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,*,-1,*,*,*&gt;"/>
    <DisplayString Condition="m_storage.m_data == 0">empty</DisplayString>
    <DisplayString Condition="m_storage.m_data != 0">[{$T2}, {m_storage.m_cols}] (dynamic column matrix)</DisplayString>
    <Expand>
      <ArrayItems Condition="Flags%2">
        <!-- row major layout -->
        <Rank>2</Rank>
        <Size>$i==0 ? $T2 : m_storage.m_cols</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
      <ArrayItems Condition="!(Flags%2)">
        <!-- column major layout -->
        <Direction>Backward</Direction>
        <Rank>2</Rank>
        <Size>$i==0 ? $T2 : m_storage.m_cols</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Dynamic x Fixed Matrix -->
  <Type Name="Eigen::Matrix&lt;*,-1,*,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,-1,*,*,*,*&gt;"/>
    <DisplayString Condition="m_storage.m_data == 0">empty</DisplayString>
    <DisplayString Condition="m_storage.m_data != 0">[{m_storage.m_rows}, {$T2}] (dynamic row matrix)</DisplayString>
    <Expand>
      <ArrayItems Condition="Flags%2">
        <!-- row major layout -->
        <Rank>2</Rank>
        <Size>$i==0 ? m_storage.m_rows : $T2</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
      <ArrayItems Condition="!(Flags%2)">
        <!-- column major layout -->
        <Direction>Backward</Direction>
        <Rank>2</Rank>
        <Size>$i==0 ? m_storage.m_rows : $T2</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Dynamic Column Vector -->
  <Type Name="Eigen::Matrix&lt;*,1,-1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,1,-1,*,*,*&gt;"/>
    <DisplayString Condition="m_storage.m_data == 0">empty</DisplayString>
    <DisplayString Condition="m_storage.m_data != 0">[{m_storage.m_cols}] (dynamic column vector)</DisplayString>
    <Expand>
      <Item Name="[size]">m_storage.m_cols</Item>
      <ArrayItems>
        <Size>m_storage.m_cols</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Dynamic Row Vector -->
  <Type Name="Eigen::Matrix&lt;*,-1,1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,-1,1,*,*,*&gt;"/>
    <DisplayString Condition="m_storage.m_data == 0">empty</DisplayString>
    <DisplayString Condition="m_storage.m_data != 0">[{m_storage.m_rows}] (dynamic row vector)</DisplayString>
    <Expand>
      <Item Name="[size]">m_storage.m_rows</Item>
      <ArrayItems>
        <Size>m_storage.m_rows</Size>
        <ValuePointer>m_storage.m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Fixed Vector -->
  <Type Name="Eigen::Matrix&lt;*,1,1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Array&lt;*,1,1,*,*,*&gt;"/>
    <DisplayString>[1] {m_storage.m_data.array[0]}</DisplayString>
    <Expand>
      <Item Name="[x]">m_storage.m_data.array[0]</Item>
    </Expand>
  </Type>
  <Type Name="Eigen::Matrix&lt;*,2,1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Matrix&lt;*,1,2,*,*,*&gt;"/>
    <AlternativeType Name="Eigen::Array&lt;*,2,1,*,*,*&gt;"/>
    <AlternativeType Name="Eigen::Array&lt;*,1,2,*,*,*&gt;"/>
    <DisplayString>[2] {m_storage.m_data.array[0]} {m_storage.m_data.array[1]}</DisplayString>
    <Expand>
      <Item Name="[x]">m_storage.m_data.array[0]</Item>
      <Item Name="[y]">m_storage.m_data.array[1]</Item>
    </Expand>
  </Type>
  <Type Name="Eigen::Matrix&lt;*,3,1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Matrix&lt;*,1,3,*,*,*&gt;"/>
    <AlternativeType Name="Eigen::Array&lt;*,3,1,*,*,*&gt;"/>
    <AlternativeType Name="Eigen::Array&lt;*,1,3,*,*,*&gt;"/>
    <DisplayString>[3] {m_storage.m_data.array[0]} {m_storage.m_data.array[1]} {m_storage.m_data.array[2]}</DisplayString>
    <Expand>
      <Item Name="[x]">m_storage.m_data.array[0]</Item>
      <Item Name="[y]">m_storage.m_data.array[1]</Item>
      <Item Name="[z]">m_storage.m_data.array[2]</Item>
    </Expand>
  </Type>
  <Type Name="Eigen::Matrix&lt;*,4,1,*,*,*&gt;">
    <AlternativeType Name="Eigen::Matrix&lt;*,1,4,*,*,*&gt;"/>
    <AlternativeType Name="Eigen::Array&lt;*,4,1,*,*,*&gt;"/>
    <AlternativeType Name="Eigen::Array&lt;*,1,4,*,*,*&gt;"/>
    <DisplayString>[4] {m_storage.m_data.array[0]} {m_storage.m_data.array[1]} {m_storage.m_data.array[2]} {m_storage.m_data.array[3]}</DisplayString>
    <Expand>
      <Item Name="[x]">m_storage.m_data.array[0]</Item>
      <Item Name="[y]">m_storage.m_data.array[1]</Item>
      <Item Name="[z]">m_storage.m_data.array[2]</Item>
      <Item Name="[w]">m_storage.m_data.array[3]</Item>
    </Expand>
  </Type>

</AutoVisualizer>